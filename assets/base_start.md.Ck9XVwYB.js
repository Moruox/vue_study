import{T as l,_ as t}from"./chunks/dom.vue_vue_type_style_index_0_lang.B-DpeOHW.js";import{Q as p}from"./chunks/index.DMUZYavE.js";import{o as h,c as k,I as s,w as a,k as i,a4 as n,D as c}from"./chunks/framework.Ct5bBWy3.js";const d="/vue_study/assets/dmoe_end.DY4HI5UC.gif",r=`<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Document</title>
    <style>
        #addButton {
            min-width: 50px;
            padding: 4px;
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
<div id="content">
</div>
<button id="addButton">递增</button>
<script type="module">
    //声明数据源
    const data = {
        number: 0
    }
    //获取DOM元素
    const content = document.getElementById("content");
    const button = document.querySelector("#addButton");
    //渲染函数
    const render = () => {
        content.innerHTML = data.number;
    };
    //初始化渲染
    render();
    //绑定事件监听(按钮每次被点击时，数据number加1，并重新渲染)
    button.addEventListener("click", () => {
        data.number++;
        render();
    });
<\/script>
</body>
</html>`,o=n('<div class="tip custom-block"><p class="custom-block-title">目标</p><ul><li>帮助你快速上手<code>Vue</code></li><li>了解<code>Vue</code>的核心概念到常用<code>Api</code>使用</li><li>了解最佳实践的开发流程</li><li>循序渐进从基础使用到<code>案列实战</code>完成业务的增删除改查功能。 <img src="'+d+'" alt="img.gif"></li><li>请按章节顺序阅读。</li><li>⭐️ 表示需要了解的知识点。</li><li>✳️ 表示需要掌握的知识点。</li><li>🚩️ 表示可以稍后了解学习的知识点。</li></ul></div><h2 id="vue-是什么、改变了什么" tabindex="-1">Vue 是什么、改变了什么? <a class="header-anchor" href="#vue-是什么、改变了什么" aria-label="Permalink to &quot;Vue 是什么、改变了什么?&quot;">​</a></h2><p>vue是一个渐进式的 JavaScript 框架，专注于视图层的开发。 易学易用，性能出色，适用场景丰富的 Web 前端框架。</p><h2 id="_1-开发者体验-更少的代码-⭐️" tabindex="-1">1.开发者体验(更少的代码) ⭐️ <a class="header-anchor" href="#_1-开发者体验-更少的代码-⭐️" aria-label="Permalink to &quot;1.开发者体验(更少的代码) ⭐️&quot;">​</a></h2><p>我们来看一个基础的例子，实现一样的功能，使用<code>原生JS</code>和<code>Vue</code>的写法差别。</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>你可以通过下方控件的查看展开代码按钮,来查看代码的具体实现方式。</p></div>',6),E=n(`<div class="info custom-block"><p class="custom-block-title">说明</p><p>可以看到<code>Vue</code>语法相比于<code>原生语法</code>更加简洁，更加易读，更加易于维护，作为开发者，我们不需要关心底层的DOM操作，只需要关注业务逻辑即可。 在代码书写上，只要声明一个<code>响应式</code>数据，并将数据放到模版中,<code>Vue</code>会自动帮我们建立<code>关联关系</code>处理好DOM的更新，无需我们手动操作DOM。</p></div><div class="tip custom-block"><p class="custom-block-title">名词解释<code>DOM</code></p><p>DOM（Document Object Model）即文档对象模型，是W3C组织推荐的处理可扩展置标语言的标准编程接口。它定义了处理网页内容的模型以及如何通过脚本来操纵网页的内容、结构和样式。</p><p>大白话讲：就是我们写的标签如:<code>&lt;div&gt;</code>,便于在js中操作映射的对象,通过操作DOM对象,我们可以对网页的元素进行各种操作,比如添加、删除、修改、移动等。</p></div><div class="tip custom-block"><p class="custom-block-title">名词解释<code>响应式</code></p><p>在<code>Vue</code>中，数据变化时，视图会自动更新，而实现这一功能的机制就是<code>响应式</code>，响应式数据的生成要通过vue的内置函数<code>reactive</code>、<code>ref</code>、<code>computed</code>等来实现， 这些函数会返回一个<code>响应式对象</code>,当数据发生变化时，<code>Vue</code>会自动更新视图,如果<code>数据源</code>是非响应式数据,即使放入模版中,也无法实现视图的更新,因为<code>Vue</code>无法建立<code>关联关系</code>来实现更新。</p></div><h2 id="_2-开发者体验-对typescrip的支持-⭐️" tabindex="-1">2.开发者体验(对TypeScrip的支持) ⭐️ <a class="header-anchor" href="#_2-开发者体验-对typescrip的支持-⭐️" aria-label="Permalink to &quot;2.开发者体验(对TypeScrip的支持) ⭐️&quot;">​</a></h2><p><code>javascript语法</code></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;12&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>typescript语法</code></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: Argument of type &#39;&quot;1&quot;&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="info custom-block"><p class="custom-block-title">说明</p><p>可以看到<code>javascript</code>语法在类型检查上并不严格，函数的参数约束性几乎没有，这会导致一些隐性bug。而<code>typescript</code>语法则更加严格，在开发者的编码习惯上更加规范，更加有利于代码的维护和扩展,同时规范的类型检查也能更好地提供代码提示，提高开发者的开发效率。 而<code>Vue3.0</code>版本默认内置<code>typescript</code>支持，可以更加方便地进行类型检查。</p></div><div class="tip custom-block"><p class="custom-block-title">名词解释<code>TypeScript</code></p><ul><li><code>TypeScript</code>是微软对<code>JavaScript</code>的类型约束上的一个补充,它可以提供静态类型检查。</li><li>让<code>JavaScript</code>拥有类型系统,像<code>Java</code>这种强类型语言一样,更好地严格约束代码,提高代码的可维护性和扩展性。</li><li>文件后缀以<code>.ts</code>结尾,最终会被编译成<code>JavaScript</code>代码。</li></ul></div><p>当然如果你对<code>typescript</code>还不了解，请参考<a href="https://typescript.p6p.net/" target="_blank" rel="noreferrer">TypeScript 教程(阮一峰)</a>。</p><h2 id="_3-开发者体验-对es6模块化的支持-⭐️" tabindex="-1">3.开发者体验(对ES6模块化的支持) ⭐️ <a class="header-anchor" href="#_3-开发者体验-对es6模块化的支持-⭐️" aria-label="Permalink to &quot;3.开发者体验(对ES6模块化的支持) ⭐️&quot;">​</a></h2><p><code>非模块化代码</code></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*共用作用域,容易出现变量污染、命名冲突等问题,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 公共函数、变量、对象等无法抽离模、复用块化管理,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 无法实现模块化管理,不利于代码的维护和扩展。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 不利于代码的维护和扩展。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js-单独的js文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commonFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commonFn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  commonFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  commonFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>模块化代码</code></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//模块化,通过模块化可以将公共函数、变量、对象等抽离出来,实现块化管理,提高代码的可维护性和扩展性。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js-单独的js文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GlobalConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    API_URL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commonFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commonFn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.js-使用模块化的js文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { commonFn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commonFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c.js-使用模块化的js文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { commonFn,GlobalConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commonFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GlobalConfig.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">API_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;API_URL is correct&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="info custom-block"><p class="custom-block-title">说明</p><p><code>Vue</code>支持<code>ES6</code>模块化，可以更加方便地进行代码的组织和管理，更加有利于代码的维护和扩展。</p></div><div class="tip custom-block"><p class="custom-block-title">名词解释<code>ES6</code></p><p><code>ECMAScript</code>是JavaScript的标准，<code>ES6</code>是<code>ECMAScript</code>的第六个版本，它新增了很多有用的功能，包括模块化、异步编程、类、Promise等。</p></div><div class="tip custom-block"><p class="custom-block-title">名词解释<code>模块化</code></p><p>模块化是指将一个大程序分解成小的、可管理的、可复用的模块，每个模块只负责完成一部分功能，这样可以提高代码的可维护性和扩展性。</p></div><p>当然如果你对<code>ES6</code>模块化还不了解，请参考<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">ECMAScript6 教程(阮一峰)</a>。</p><h2 id="_4-开发者体验-丰富的生态系统-⭐️" tabindex="-1">4.开发者体验(丰富的生态系统) ⭐️ <a class="header-anchor" href="#_4-开发者体验-丰富的生态系统-⭐️" aria-label="Permalink to &quot;4.开发者体验(丰富的生态系统) ⭐️&quot;">​</a></h2><ul><li>官方文档中文支持完美,可以让开发者更加方便地阅读。<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue 官方文档中文版</a></li><li><code>Vue</code>生态系统丰富，提供了大量的插件、工具、组件，可以帮助开发者解决开发中的各种问题。</li><li>基于<code>npm仓库</code>的包管理仓库支持，可以轻松安装第三方插件，提高开发效率。</li></ul><div class="tip custom-block"><p class="custom-block-title">名词解释<code>npm仓库</code></p><p><code>npm仓库</code>是一个公共的<code>JavaScript</code>包管理仓库，可以帮助开发者发布、安装、搜索、共享<code>JavaScript</code>代码。 在npm仓库中，可以搜索到大量的第三方插件、工具、组件，可以帮助开发者解决开发中的各种问题。 <br><a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm 仓库地址</a></p></div><h2 id="_5-开发者体验-组件化开发-⭐️" tabindex="-1">5.开发者体验(组件化开发) ⭐️ <a class="header-anchor" href="#_5-开发者体验-组件化开发-⭐️" aria-label="Permalink to &quot;5.开发者体验(组件化开发) ⭐️&quot;">​</a></h2><ul><li><code>Vue</code>提供了<code>组件化开发</code>的能力，可以将复杂的页面分解成多个小组件，每个组件只负责完成一部分功能，可以更加方便地进行代码的维护和扩展。</li><li>可以这么理解,在<code>Vue</code>中,我们可以把一个复杂的页面拆分成多个组件,每个组件只负责完成一部分功能,然后通过组合这些组件来实现复杂的页面或复用.</li><li>在使用时,只需要把组件想象成一个封装好的函数,导入到需要的地方,传入相应的数据,就可以实现页面的渲染。</li></ul><h2 id="_6-开发者体验-更好的团队协作-⭐️" tabindex="-1">6.开发者体验(更好的团队协作) ⭐️ <a class="header-anchor" href="#_6-开发者体验-更好的团队协作-⭐️" aria-label="Permalink to &quot;6.开发者体验(更好的团队协作) ⭐️&quot;">​</a></h2><p><code>Vue</code>中每一个组件可以是一个<code>.vue</code>文件,开发之间可以完成各自的业务逻辑，互不干扰。 <code>Vue项目</code>基于<code>Node.js</code>开发<code>Vite</code>构建,可以无缝接入<code>git</code>版本管理工具,<code>eslint</code>,<code>prettier</code>等代码规范工具,更加方便地进行团队协作。</p><div class="tip custom-block"><p class="custom-block-title">名词解释<code>Vite</code></p><p><code>Vite</code>是一个快速的<code>web</code>应用开发构建工具，它使用<code>ESBuild</code>打包代码，并使用<code>Rollup</code>进行模块化，它可以极大地提高开发者的开发效率。 如果你对<code>Vite</code>还不了解，请参考<a href="https://vitejs.cn/vite3-cn/" target="_blank" rel="noreferrer">Vite 教程(vitejs.dev)</a>(非底层开发人员,建议后续学习)。</p></div>`,28),A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"base/start.md","filePath":"base/start.md"}'),g={name:"base/start.md"},D=Object.assign(g,{setup(u){return(b,m)=>{const e=c("ClientOnly");return h(),k("div",null,[o,s(e,null,{default:a(()=>[s(i(p),{title:"",description:"",select:"html",order:"html,vue",github:"",gitlab:"",theme:"",lightTheme:"atom-one-light",darkTheme:"atom-one-dark",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,htmlCode:i(r),vueCode:i(l)},{vue:a(()=>[s(t)]),_:1},8,["htmlCode","vueCode"])]),_:1}),E])}}});export{A as __pageData,D as default};
